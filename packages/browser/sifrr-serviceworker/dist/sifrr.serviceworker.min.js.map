{"version":3,"file":"sifrr.serviceworker.min.js","sources":["../src/sifrr.serviceworker.js"],"sourcesContent":["const CACHE_VERSION = '1';\nconst POLICIES = {\n  'default': {\n    type: 'NETWORK_FIRST',\n    cache: 'other'\n  }\n};\n\nconst FALLBACK_CACHE = 'fallbacks';\nconst FALLBACKS = {\n  'default': './404.html'\n};\n\nconst PRECACHE_URLS = [];\n\nfunction setupSifrrSW() {\n  self.addEventListener('install', event => {\n    self.skipWaiting(); // replace sw ASAP\n    event.waitUntil(precache(PRECACHE_URLS, FALLBACKS));\n  });\n\n  self.addEventListener('activate', () => {\n    let currentCaches = [FALLBACK_CACHE + '-v' + CACHE_VERSION];\n    for (let [, value] of Object.entries(POLICIES)) {\n      currentCaches.push(value.cache + '-v' + CACHE_VERSION);\n    }\n    caches.keys().then(cacheNames => {\n      return cacheNames.filter(cacheName => !currentCaches.includes(cacheName));\n    }).then(cachesToDelete => {\n      return Promise.all(cachesToDelete.map(cacheToDelete => {\n        return caches.delete(cacheToDelete);\n      }));\n    }).then(() => self.clients.claim());\n  }); // remove old caches versions and add new ones\n\n  self.addEventListener('fetch', event => {\n    let request = event.request;\n    let otherReq = request.clone();\n    let oreq = request.clone();\n    if (request.method === 'GET') {\n      event.respondWith(respondWithPolicy(request).then(response => {\n        if (!response.ok && response.status > 0 && findRegex(oreq.url, FALLBACKS)) {\n          throw Error('response status ' + response.status);\n        }\n        return response;\n      }).catch(() => respondWithFallback(otherReq)));\n    }\n  });\n}\n\nfunction findRegex (url, obj) {\n  for (let [key, value] of Object.entries(obj)) {\n    const regex = new RegExp(key);\n    if (url.match(regex)) return value;\n  }\n  return obj['default'];\n}\n\nfunction respondWithPolicy (request) {\n  let new_request = request.clone();\n  const { type, cache } = findRegex(request.url, POLICIES) || {\n    type: 'default',\n    cache: 'extra'\n  };\n  let resp;\n  switch (type) {\n  case 'NETWORK_ONLY':\n    resp = fromNetwork(new_request, cache);\n    break;\n  case 'CACHE_ONLY':\n    resp = fromCache(new_request, cache);\n    break;\n  case 'CACHE_FIRST':\n    resp = fromCache(new_request, cache).catch(() => fromNetwork(request, cache));\n    break;\n  case 'NETWORK_FIRST':\n    resp = fromNetwork(new_request, cache).catch(() => fromCache(request, cache));\n    break;\n  default:\n    resp = fromNetwork(new_request, cache).catch(() => fromCache(request, cache));\n    break;\n  }\n  return resp;\n}\n\nfunction respondWithFallback (request) {\n  const fallback = findRegex(request.url, FALLBACKS);\n  const fb = new Request(fallback);\n  return fromCache(fb, FALLBACK_CACHE);\n}\n\nfunction requestFromURL (url) {\n  return new Request(url, {\n    method: 'GET'\n  });\n}\n\nfunction precache (urls, fbs) {\n  let promises = [];\n  urls.forEach(u => {\n    let req = requestFromURL(u);\n    return promises.push(fromNetwork(req, findRegex(u, POLICIES).cache));\n  });\n  for (let [, value] of Object.entries(fbs)) {\n    let req = requestFromURL(value);\n    promises.push(fromNetwork(req, FALLBACK_CACHE));\n  }\n  return Promise.all(promises);\n}\n\nfunction fromCache (request, cache) {\n  fromNetwork(request.clone(), cache);\n  return caches.open(cache + '-v' + CACHE_VERSION).then(cache => cache.match(request)).then(resp => {\n    if (resp) return resp;\n    else throw 'Cache not found for ' + request.url;\n  });\n}\n\nfunction fromNetwork (request, cache) {\n  return caches.open(cache + '-v' + CACHE_VERSION).then(cache => fetch(request).then(response => cache.put(request, response.clone()).then(() => response)));\n}\n\nmodule.exports = setupSifrrSW();\n"],"names":["CACHE_VERSION","POLICIES","FALLBACK_CACHE","FALLBACKS","PRECACHE_URLS","findRegex","url","obj","key","value","Object","entries","regex","RegExp","match","requestFromURL","Request","fromCache","request","cache","clone","caches","open","then","resp","fromNetwork","fetch","response","put","addEventListener","event","skipWaiting","waitUntil","urls","fbs","promises","forEach","u","req","push","Promise","all","precache","currentCaches","keys","cacheNames","filter","cacheName","includes","cachesToDelete","map","cacheToDelete","delete","self","clients","claim","otherReq","oreq","method","respondWith","new_request","type","catch","respondWithPolicy","ok","status","Error","fallback","respondWithFallback"],"mappings":";qNAAA,MAAMA,EAAgB,IAChBC,EAAW,SACJ,MACH,sBACC,UAILC,EAAiB,YACjBC,EAAY,SACL,cAGPC,EAAgB,GAqCtB,SAASC,EAAWC,EAAKC,OAClB,IAAKC,EAAKC,KAAUC,OAAOC,QAAQJ,GAAM,OACtCK,EAAQ,IAAIC,OAAOL,MACrBF,EAAIQ,MAAMF,GAAQ,OAAOH,SAExBF,EAAA,QAoCT,SAASQ,EAAgBT,UAChB,IAAIU,QAAQV,EAAK,QACd,QAiBZ,SAASW,EAAWC,EAASC,YACfD,EAAQE,QAASD,GACtBE,OAAOC,KAAKH,EAAQ,KAAOnB,GAAeuB,KAAKJ,GAASA,EAAML,MAAMI,IAAUK,KAAKC,OACpFA,EAAM,OAAOA,EACZ,KAAM,uBAAyBN,EAAQZ,MAIhD,SAASmB,EAAaP,EAASC,UACtBE,OAAOC,KAAKH,EAAQ,KAAOnB,GAAeuB,KAAKJ,GAASO,MAAMR,GAASK,KAAKI,GAAYR,EAAMS,IAAIV,EAASS,EAASP,SAASG,KAAK,IAAMI,iBAvG1IE,iBAAiB,UAAWC,SAC1BC,gBACCC,UA+EV,SAAmBC,EAAMC,OACnBC,EAAW,KACVC,QAAQC,QACPC,EAAMvB,EAAesB,UAClBF,EAASI,KAAKd,EAAYa,EAAKjC,EAAUgC,EAAGpC,GAAUkB,cAE1D,KAAOV,KAAUC,OAAOC,QAAQuB,GAAM,KACrCI,EAAMvB,EAAeN,KAChB8B,KAAKd,EAAYa,EAAKpC,WAE1BsC,QAAQC,IAAIN,GAzFDO,CAAStC,EAAeD,WAGrC0B,iBAAiB,WAAY,SAC5Bc,EAAgB,CAACzC,EAAiB,KAAOF,OACxC,KAAOS,KAAUC,OAAOC,QAAQV,KACrBsC,KAAK9B,EAAMU,MAAQ,KAAOnB,UAEnC4C,OAAOrB,KAAKsB,GACVA,EAAWC,OAAOC,IAAcJ,EAAcK,SAASD,KAC7DxB,KAAK0B,GACCT,QAAQC,IAAIQ,EAAeC,IAAIC,GAC7B9B,OAAO+B,OAAOD,MAEtB5B,KAAK,IAAM8B,KAAKC,QAAQC,qBAGxB1B,iBAAiB,QAASC,QACzBZ,EAAUY,EAAMZ,QAChBsC,EAAWtC,EAAQE,QACnBqC,EAAOvC,EAAQE,QACI,QAAnBF,EAAQwC,UACJC,YAkBZ,SAA4BzC,OACtB0C,EAAc1C,EAAQE,cACpByC,KAAEA,EAAF1C,MAAQA,GAAUd,EAAUa,EAAQZ,IAAKL,IAAa,MACpD,gBACC,aAELuB,SACIqC,OACH,iBACIpC,EAAYmC,EAAazC,aAE7B,eACIF,EAAU2C,EAAazC,aAE3B,gBACIF,EAAU2C,EAAazC,GAAO2C,MAAM,IAAMrC,EAAYP,EAASC,cAEnE,0BAIIM,EAAYmC,EAAazC,GAAO2C,MAAM,IAAM7C,EAAUC,EAASC,WAGjEK,EA1CeuC,CAAkB7C,GAASK,KAAKI,QAC3CA,EAASqC,IAAMrC,EAASsC,OAAS,GAAK5D,EAAUoD,EAAKnD,IAAKH,SACvD+D,MAAM,mBAAqBvC,EAASsC,eAErCtC,IACNmC,MAAM,KAwCf,SAA8B5C,SACtBiD,EAAW9D,EAAUa,EAAQZ,IAAKH,UAEjCc,EADI,IAAID,QAAQmD,GACFjE,IA3CFkE,CAAoBZ"}