{"version":3,"file":"sifrr.serviceworker.min.js","sources":["../src/sifrr.serviceworker.js"],"sourcesContent":["class SW {\n  constructor(options) {\n    this.options = Object.assign({\n      version: 1,\n      fallbackCacheName: 'fallbacks',\n      defaultCacheName: 'default',\n      policies: {},\n      fallbacks: {},\n      precacheUrls: []\n    }, options);\n    this.options.policies.default = Object.assign(this.options.policies.default || {}, {\n      policy: 'NETWORK_FIRST',\n      cacheName: this.options.defaultCacheName\n    });\n  }\n\n  setup() {\n    self.addEventListener('install', this.installEventListener.bind(this));\n    self.addEventListener('activate', this.activateEventListener.bind(this));\n    self.addEventListener('fetch', this.fetchEventListener.bind(this));\n  }\n\n  setupPushNotification(defaultTitle = '', defaultOptions = { body: '' }) {\n    this.defaultPushTitle = defaultTitle;\n    this.defaultPushOptions = defaultOptions;\n    self.addEventListener('push', this.pushEventListener.bind(this));\n    self.addEventListener('notificationclick', this.onNotificationClick.bind(this));\n  }\n\n  installEventListener(event) {\n    event.waitUntil(this.precache());\n    this.onInstall(event);\n  }\n\n  /* istanbul ignore next */\n  onInstall() {}\n\n  activateEventListener() {\n    const version = '-v' + this.options.version;\n    // remove old version caches\n    caches.keys().then(cacheNames => {\n      return cacheNames.filter(cacheName => cacheName.indexOf(version) < 0);\n    }).then(cachesToDelete => {\n      return Promise.all(cachesToDelete.map(cacheToDelete => {\n        return caches.delete(cacheToDelete);\n      }));\n    }).then(() => self.clients.claim());\n  }\n\n  fetchEventListener(event) {\n    const request = event.request;\n    const otherReq = request.clone();\n    const oreq = request.clone();\n    if (request.method === 'GET') {\n      event.respondWith(this.respondWithPolicy(request).then(response => {\n        if (!response.ok && response.status > 0 && this.findRegex(oreq.url, this.options.fallbacks)) {\n          throw Error('response status ' + response.status);\n        }\n        return response;\n      }).catch((e) => this.respondWithFallback(otherReq, e)));\n    }\n  }\n\n  pushEventListener(event) {\n    let data = {};\n    if (event.data) {\n      if (typeof event.data.json === 'function') data = event.data.json();\n      else data = event.data.json;\n    }\n\n    const title = data.title || this.defaultPushTitle;\n    const options = Object.assign(this.defaultPushOptions, data);\n\n    return self.registration.showNotification(title, options);\n  }\n\n  /* istanbul ignore next */\n  onNotificationClick() {}\n\n  precache(urls = this.options.precacheUrls, fbs = this.options.fallbacks) {\n    const me = this;\n    let promises = [];\n    urls.forEach(u => {\n      let req = me.requestFromURL(u);\n      return promises.push(me.responseFromNetwork(req, me.findRegex(u, me.options.policies).cacheName));\n    });\n    for (let value of Object.values(fbs)) {\n      let req = this.requestFromURL(value);\n      promises.push(this.responseFromNetwork(req, this.options.fallbackCacheName));\n    }\n    return Promise.all(promises);\n  }\n\n  respondWithFallback(request, error) {\n    const fallback = this.requestFromURL(this.findRegex(request.url, this.options.fallbacks));\n    if (fallback !== undefined) {\n      return this.responseFromCache(fallback, this.options.fallbackCacheName);\n    } else {\n      /* istanbul ignore next */\n      throw error;\n    }\n  }\n\n  respondWithPolicy(request) {\n    const req1 = request.clone();\n    const req2 = request.clone();\n    const config = this.findRegex(request.url, this.options.policies);\n    const policy = config.policy;\n    const cacheName = config.cacheName || this.options.defaultCacheName;\n\n    let resp;\n    switch (policy) {\n    case 'NETWORK_ONLY':\n      resp = this.responseFromNetwork(req1, cacheName, false);\n      break;\n    case 'CACHE_FIRST':\n    case 'CACHE_ONLY':\n      resp = this.responseFromCache(req1, cacheName)\n        .catch(() => this.responseFromNetwork(request, cacheName));\n      break;\n    case 'CACHE_AND_UPDATE':\n      resp = this.responseFromCache(req1, cacheName)\n        .catch(() => this.responseFromNetwork(request, cacheName));\n      this.responseFromNetwork(req2, cacheName);\n      break;\n    default:\n      resp = this.responseFromNetwork(req1, cacheName)\n        .catch(() => this.responseFromCache(request, cacheName));\n      break;\n    }\n    return resp;\n  }\n\n  responseFromNetwork(request, cache, putInCache = true) {\n    return caches.open(cache + '-v' + this.options.version).then(cache => fetch(request).then(response => {\n      if (putInCache) cache.put(request, response.clone());\n      return response;\n    }));\n  }\n\n  responseFromCache(request, cache) {\n    return caches.open(cache + '-v' + this.options.version).then(cache => cache.match(request)).then(resp => {\n      if (resp) return resp;\n      else throw 'Cache not found for ' + request.url;\n    });\n  }\n\n  requestFromURL(url, method = 'GET') {\n    return new Request(url, {\n      method: method\n    });\n  }\n\n  findRegex(url, policies) {\n    for (let [key, value] of Object.entries(policies)) {\n      const regex = new RegExp(key);\n      if (regex.test(url)) return value;\n    }\n    return policies['default'];\n  }\n}\n\nmodule.exports = SW;\n"],"names":["constructor","options","Object","assign","version","fallbackCacheName","defaultCacheName","policies","fallbacks","precacheUrls","default","this","policy","cacheName","setup","self","addEventListener","installEventListener","bind","activateEventListener","fetchEventListener","setupPushNotification","defaultTitle","defaultOptions","body","defaultPushTitle","defaultPushOptions","pushEventListener","onNotificationClick","event","waitUntil","precache","onInstall","caches","keys","then","cacheNames","filter","indexOf","cachesToDelete","Promise","all","map","cacheToDelete","delete","clients","claim","request","otherReq","clone","oreq","method","respondWith","respondWithPolicy","response","ok","status","findRegex","url","Error","catch","e","respondWithFallback","data","json","title","registration","showNotification","urls","fbs","me","promises","forEach","u","req","requestFromURL","push","responseFromNetwork","value","values","error","fallback","undefined","responseFromCache","req1","req2","config","resp","cache","putInCache","open","fetch","put","match","Request","key","entries","RegExp","test"],"mappings":"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"}