{"version":3,"file":"sifrr.storage.min.js","sources":["../src/utils/json.js","../src/storages/storage.js","../src/storages/indexeddb.js","../src/storages/websql.js","../src/storages/localstorage.js","../src/storages/cookies.js","../src/storages/jsonstorage.js","../src/storages.js","../src/sifrr.storage.js"],"sourcesContent":["class Json {\n  static parse(data) {\n    let ans = {};\n    if (typeof data == 'string') {\n      try {\n        ans = JSON.parse(data);\n      } catch(e) {\n        return data;\n      }\n      return this.parse(ans);\n    } else if (Array.isArray(data)) {\n      ans = [];\n      data.forEach((v, i) => {\n        ans[i] = this.parse(v);\n      });\n    } else if (typeof data == 'object') {\n      for (const k in data) {\n        ans[k] = this.parse(data[k]);\n      }\n    } else {\n      return data;\n    }\n    return ans;\n  }\n\n  static stringify(data) {\n    if (typeof data == 'string') {\n      return data;\n    } else {\n      return JSON.stringify(data);\n    }\n  }\n}\n\nmodule.exports = Json;\n","const JsonExt = require('../utils/json');\n\nclass Storage {\n  constructor(options) {\n    this._options = options;\n  }\n\n  _parseKeyValue(key, value) {\n    let jsonConstructor = {}.constructor;\n    if (typeof value == 'undefined') {\n      if (Array.isArray(key)) {\n        return key;\n      } else if (typeof key == 'string') {\n        return [key];\n      } else if (key.constructor === jsonConstructor) {\n        return key;\n      } {\n        throw Error('Invalid Key');\n      }\n    } else if (typeof key == 'string') {\n      let ans = {};\n      ans[key] = value;\n      return ans;\n    } else {\n      throw Error('Invalid Key');\n    }\n  }\n\n  _select(keys) {\n    return this.data().then((data) => {\n      let ans = {};\n      keys.forEach((key) => ans[key] = data[key]);\n      return ans;\n    });\n  }\n\n  _upsert(data) {\n    let table = this.table;\n    for (let key in data) {\n      table[key] = data[key];\n    }\n    this.table = table;\n  }\n\n  _delete(keys) {\n    let table = this.table;\n    keys.forEach((key) => delete table[key]);\n    this.table = table;\n  }\n\n  _clear() {\n    this.table = {};\n  }\n\n  _isEqual(options, type) {\n    if (this.tableName == options.name + options.version && this.type == type) { return true; }\n    else { return false; }\n  }\n\n  get tableName() {\n    return this.name + this.version;\n  }\n\n  get name() {\n    return this._options.name;\n  }\n\n  get version() {\n    return this._options.version;\n  }\n\n  get description() {\n    return this._options.description;\n  }\n\n  get type() {\n    return this.constructor.type;\n  }\n\n  isSupported() {\n    if (typeof window == 'undefined' || typeof document == 'undefined') { return true; }\n    else if (window && typeof this.store != 'undefined') { return true; }\n    else { return false; }\n  }\n\n  all() {\n    return this.data();\n  }\n\n  data() {\n    return Promise.resolve(this._parsedData());\n  }\n\n  select(key) {\n    return Promise.resolve(this._select(this._parseKeyValue(key)));\n  }\n\n  insert(key, value) {\n    return Promise.resolve(this._upsert(this._parseKeyValue(key, value)));\n  }\n\n  update(key, value) {\n    return Promise.resolve(this._upsert(this._parseKeyValue(key, value)));\n  }\n\n  upsert(key, value) {\n    return Promise.resolve(this._upsert(this._parseKeyValue(key, value)));\n  }\n\n  delete(key) {\n    return Promise.resolve(this._delete(this._parseKeyValue(key)));\n  }\n\n  deleteAll() {\n    return Promise.resolve(this._clear());\n  }\n\n  clear() {\n    return Promise.resolve(this._clear());\n  }\n\n  static stringify(data) {\n    return JsonExt.stringify(data);\n  }\n\n  static parse(data) {\n    return JsonExt.parse(data);\n  }\n}\n\nmodule.exports = Storage;\n","const Storage = require('./storage');\n\nclass IndexedDB extends Storage {\n  constructor(options) {\n    super(options);\n  }\n\n  _parsedData() {\n    return this._tx('readonly', 'getAll').then((result) => this.parse(result));\n  }\n\n  _select(keys) {\n    let ans = {};\n    let promises = [];\n    keys.forEach((key) => promises.push(this._tx('readonly', 'get', key).then((r) => ans[key] = this.parse(r))));\n    return Promise.all(promises).then(() => ans);\n  }\n\n  _upsert(data) {\n    let promises = [];\n    for (let key in data) {\n      let promise = this._tx('readonly', 'get', key).then((oldResult) => {\n        if (oldResult && oldResult.key == key) {\n          return this._tx('readwrite', 'put', { 'key': key, 'value': data[key] });\n        } else {\n          return this._tx('readwrite', 'add', { 'key': key, 'value': data[key] });\n        }\n      });\n      promises.push(promise);\n    }\n    return Promise.all(promises);\n  }\n\n  _delete(keys) {\n    let promises = [];\n    keys.forEach((key) => promises.push(this._tx('readwrite', 'delete', key)));\n    return Promise.all(promises);\n  }\n\n  _clear() {\n    return this._tx('readwrite', 'clear');\n  }\n\n  _tx(scope, fn, params) {\n    let me = this;\n    return this.createStore(me.tableName).then((db) => {\n      return new Promise((resolve, reject) => {\n        let tx = db.transaction(me.tableName, scope).objectStore(me.tableName);\n        let request = tx[fn].call(tx, params);\n        request.onsuccess = (event) =>  resolve(event.target.result);\n        request.onerror = (event) => reject(event.error);\n      });\n    });\n  }\n\n  get store() {\n    return window.indexedDB;\n  }\n\n  createStore(table) {\n    return new Promise((resolve, reject) => {\n      const request = this.store.open(table, 1);\n      request.onupgradeneeded = (event) => {\n        let db = event.target.result;\n        db.createObjectStore(table, { keyPath: 'key' });\n      };\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  parse(data) {\n    let ans = {};\n    if (Array.isArray(data)) {\n      data.forEach((row) => {\n        ans[row.key] = row.value;\n      });\n    } else if (data && data.value) {\n      return data.value;\n    } else {\n      return undefined;\n    }\n    return ans;\n  }\n\n  static get type() {\n    return 'indexeddb';\n  }\n}\n\nmodule.exports = IndexedDB;\n","const Storage = require('./storage');\n\nclass WebSQL extends Storage {\n  constructor(options) {\n    super(options);\n    this.createStore();\n  }\n\n  _parsedData() {\n    let me = this;\n    return new Promise((resolve) => {\n      this.store.transaction(function (tx) {\n        tx.executeSql(`SELECT * FROM ${me.tableName}`, [], (txn, results) => {\n          resolve(me.parse(results));\n        });\n      });\n    });\n  }\n\n  _select(keys) {\n    let me = this;\n    let q = keys.map(() => '?').join(', ');\n    // Need to give array for ? values in executeSql's 2nd argument\n    return this.execSql(`SELECT key, value FROM ${me.tableName} WHERE key in (${q})`, keys);\n  }\n\n  _upsert(data) {\n    let table = this.tableName;\n    this.store.transaction((tx) => {\n      for (let key in data) {\n        tx.executeSql(`INSERT OR IGNORE INTO ${table}(key, value) VALUES (?, ?)`, [key, data[key]]);\n        tx.executeSql(`UPDATE ${table} SET value = ? WHERE key = ?`, [this.constructor.stringify(data[key]), key]);\n      }\n    });\n  }\n\n  _delete(keys) {\n    let table = this.tableName;\n    let q = keys.map(() => '?').join(', ');\n    return this.execSql(`DELETE FROM ${table} WHERE key in (${q})`, keys);\n  }\n\n  _clear() {\n    let table = this.tableName;\n    return this.execSql(`DELETE FROM ${table}`);\n  }\n\n  get store() {\n    if (typeof window !== 'undefined') {\n      return window.openDatabase('bs', 1, this._options.description, this._options.size);\n    } else {\n      return true;\n    }\n  }\n\n  createStore() {\n    let table = this.tableName;\n    if (typeof window == 'undefined') return;\n    return this.execSql(`CREATE TABLE IF NOT EXISTS ${table} (key unique, value)`);\n  }\n\n  execSql(query, args = []) {\n    let me = this;\n    return new Promise((resolve) => {\n      me.store.transaction(function (tx) {\n        tx.executeSql(query, args, (txn, results) => {\n          resolve(me.parse(results));\n        });\n      });\n    });\n  }\n\n  parse(results) {\n    let ans = {};\n    let len = results.rows.length, i;\n    for (i = 0; i < len; i++) {\n      ans[results.rows.item(i).key] = this.constructor.parse(results.rows.item(i).value);\n    }\n    return ans;\n  }\n\n  static get type() {\n    return 'websql';\n  }\n}\n\nmodule.exports = WebSQL;\n","const Storage = require('./storage');\n\nclass LocalStorage extends Storage {\n  constructor(options) {\n    super(options);\n  }\n\n  _parsedData() {\n    return this.table;\n  }\n\n  get table() {\n    return this.constructor.parse(this.store.getItem(this.tableName));\n  }\n\n  set table(value) {\n    this.store.setItem(this.tableName, this.constructor.stringify(value));\n  }\n\n  get store() {\n    return window.localStorage;\n  }\n\n  static get type() {\n    return 'localstorage';\n  }\n}\n\nmodule.exports = LocalStorage;\n","const Storage = require('./storage');\n\nclass Cookies extends Storage {\n  constructor(options) {\n    super(options);\n  }\n\n  _parsedData() {\n    return this.table;\n  }\n\n  get table() {\n    let result = this.store, ans = {};\n    result = result.split('; ');\n    result.forEach((value) => {\n      let [k, v] = value.split('=');\n      if (v) ans[k] = this.constructor.parse(v);\n    });\n    return ans[this.tableName] || {};\n  }\n\n  set table(value) {\n    document.cookie = `${this.tableName}=${Storage.stringify(value)}; path=/`;\n  }\n\n  get store() {\n    return document.cookie;\n  }\n\n  static get type() {\n    return 'cookies';\n  }\n}\n\nmodule.exports = Cookies;\n","const Storage = require('./storage');\n\nclass JsonStorage extends Storage {\n  constructor(options, data = {}) {\n    super(options);\n    this._upsert(this.constructor.parse(data));\n  }\n\n  _parsedData() {\n    return this._table;\n  }\n\n  get store() {\n    return this._table;\n  }\n\n  get table() {\n    return this._table || {};\n  }\n\n  set table(value) {\n    this._table = value;\n  }\n\n  static get type() {\n    return 'jsonstorage';\n  }\n}\n\nmodule.exports = JsonStorage;\n","const IndexedDB = require('./storages/indexeddb');\nconst WebSQL = require('./storages/websql');\nconst LocalStorage = require('./storages/localstorage');\nconst Cookies = require('./storages/cookies');\nconst JsonStorage = require('./storages/jsonstorage');\n\nlet storages = {};\nstorages[IndexedDB.type] = IndexedDB;\nstorages[WebSQL.type] = WebSQL;\nstorages[LocalStorage.type] = LocalStorage;\nstorages[Cookies.type] = Cookies;\nstorages[JsonStorage.type] = JsonStorage;\n\nmodule.exports = storages;\n","const storages = require('./storages');\nconst JsonStorage = require('./storages/jsonstorage');\n\nclass SifrrStorage {\n  constructor(options) {\n    if (typeof options == 'string') options = { priority: [options] }; else options = options || {};\n    this._options = Object.assign(this.constructor.defaultOptions, options);\n    return this.storage;\n  }\n\n  get storage() {\n    let storage = this.supportedStore();\n    if (typeof storage == 'undefined') throw new Error('No available storage supported in this browser');\n    let matchingInstance = this.constructor._matchingInstance(this._options, storage.type);\n    if (matchingInstance) { return matchingInstance; }\n    else {\n      let storageInstance = new storage(this._options);\n      this.constructor._add(storageInstance);\n      return storageInstance;\n    }\n  }\n\n  get priority() {\n    return this._options.priority.concat(['indexeddb', 'websql', 'localstorage', 'cookies', 'jsonstorage']);\n  }\n\n  supportedStore() {\n    for (let i = 0; i < this.priority.length; i++) {\n      let store = this.constructor.availableStores[this.priority[i]];\n      if (store && new store(this._options).isSupported()) return store;\n    }\n  }\n\n  static _matchingInstance(options, type) {\n    let allInstances = this.all, i;\n    let length = allInstances.length;\n    for (i = 0; i < length; i++) {\n      if (allInstances[i]._isEqual(options, type)) return allInstances[i];\n    }\n    return false;\n  }\n\n  static _add(instance) {\n    this._all = this._all || [];\n    this._all.push(instance);\n  }\n\n  static get availableStores() {\n    return storages;\n  }\n\n  static get defaultOptions() {\n    return {\n      priority: [],\n      name: 'SifrrStorage',\n      version: 1,\n      description: 'Sifrr Storage',\n      size: 5 * 1024 * 1024\n    };\n  }\n\n  static get all() {\n    return this._all || [];\n  }\n\n  static json(data) {\n    return new JsonStorage({}, data);\n  }\n}\n\nmodule.exports = SifrrStorage;\n"],"names":["data","ans","JSON","parse","e","this","Array","isArray","forEach","v","i","k","stringify","options","_options","key","value","jsonConstructor","constructor","Error","keys","then","table","type","tableName","name","version","description","window","document","store","Promise","resolve","_parsedData","_select","_parseKeyValue","_upsert","_delete","_clear","JsonExt","Storage","_tx","result","promises","push","r","all","promise","oldResult","scope","fn","params","me","createStore","db","reject","tx","transaction","objectStore","request","call","onsuccess","event","target","onerror","error","indexedDB","open","onupgradeneeded","createObjectStore","keyPath","row","executeSql","txn","results","q","map","join","execSql","openDatabase","size","query","args","len","rows","length","item","getItem","setItem","localStorage","split","cookie","_table","storages","IndexedDB","WebSQL","LocalStorage","Cookies","JsonStorage","priority","Object","assign","defaultOptions","storage","supportedStore","matchingInstance","_matchingInstance","storageInstance","_add","concat","availableStores","isSupported","allInstances","_isEqual","instance","_all"],"mappings":"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"}