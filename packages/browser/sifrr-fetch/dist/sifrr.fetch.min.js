/*! Sifrr.Fetch v0.0.3 - sifrr project | MIT licensed | https://github.com/sifrr/sifrr */
!function(e,s){"object"==typeof exports&&"undefined"!=typeof module?module.exports=s():"function"==typeof define&&define.amd?define(s):((e=e||self).Sifrr=e.Sifrr||{},e.Sifrr.Fetch=s())}(this,function(){"use strict";var e=class{constructor(e,s={}){this._options=s,this._url=e}get response(){const e=this;return window.fetch(this.url,this.options).then(s=>{const t=s.headers.get("content-type"),o=t&&t.includes("application/json");if(s.ok){if("function"==typeof e._options.onProgress){const t=s.headers.get("content-length"),o=parseInt(t,10);if(o&&s.body){const t=s.body.getReader();let r=0;s=new Response(new ReadableStream({start:s=>(function n(){return t.read().then(({done:t,value:i})=>{if(!t)return r+=i.byteLength,e._options.onProgress(r/o*100),s.enqueue(i),n();e._options.onProgress(100),s.close()})})()}))}else e._options.onProgress(100)}return{response:s,isJson:o}}{"function"==typeof e._options.onProgress&&e._options.onProgress(100);let t=Error(s.statusText);throw t.response=s,t}}).then(({response:e,isJson:s})=>s?e.json():e)}get url(){const e=this._options.params;return e&&Object.keys(e).length>0?this._url+"?"+Object.keys(e).map(s=>encodeURIComponent(s)+"="+encodeURIComponent(e[s])).join("&"):this._url}get options(){const e=Object.assign({mode:"cors",redirect:"follow",cache:"no-cache"},this._options);return e.headers=Object.assign({accept:"application/json"},this._options.headers||{}),"object"==typeof e.body&&(e.body=JSON.stringify(e.body)),e}};var s=class{constructor(e,s,t){this.url=e,this.protocol=s,this.fallback=t,this.id=1,this._resolvers={},this._openSocket()}async send(e,s={}){const t=this.id;this.id++,await this._openSocket();const o={query:e,variables:s,sifrrQueryId:t};return this.ws.send(JSON.stringify(o)),new Promise(e=>{this._resolvers[t]=(s=>{delete this._resolvers[t],e(s)})})}_openSocket(){if(!this.ws||this.ws.readyState===this.ws.CLOSED||this.ws.readyState===this.ws.CLOSING){this.ws=new window.WebSocket(this.url,this.protocol),this.ws.onopen=this.onopen.bind(this),this.ws.onerror=this.onerror.bind(this),this.ws.onclose=this.onclose.bind(this),this.ws.onmessage=this.onmessage.bind(this);const e=this;return new Promise(s=>{window.requestAnimationFrame(function t(){e.ws.readyState!==e.ws.OPEN?window.requestAnimationFrame(t):s()})})}return Promise.resolve(!0)}onerror(e){window.console.error(`Sifrr WebSocket(${this.url}) error:`,e)}onopen(){}onclose(){}onmessage(e){const s=JSON.parse(e.data);s.sifrrQueryId&&this._resolvers[s.sifrrQueryId](s.result)}};class t{static get(s,t){const{url:o,options:r}=this.afterUse(s,t,"GET");return new e(o,r).response}static post(s,t){const{url:o,options:r}=this.afterUse(s,t,"POST");return new e(o,r).response}static put(s,t){const{url:o,options:r}=this.afterUse(s,t,"PUT");return new e(o,r).response}static delete(s,t){const{url:o,options:r}=this.afterUse(s,t,"DELETE");return new e(o,r).response}static graphql(s,t){const{url:o,options:r}=this.afterUse(s,t,"POST"),{query:n,variables:i={}}=r;return delete r.query,delete r.variables,r.headers=r.headers||{},r.headers["Content-Type"]="application/json",r.headers.Accept="application/json",r.body={query:n,variables:i},new e(o,r).response}static graphqlWS(e,t,o){return new s(e,t,o)}static file(s,t){const{url:o,options:r}=this.afterUse(s,t,"GET");return r.headers=r.headers||{},r.headers.accept=r.headers.accept||"*/*",new e(o,r).response}static use(e){t._middlewares.push(e)}static afterUse(e,s={},o){return s.method=o,t._middlewares.forEach(t=>{const o=t(e,s);e=o.url,s=o.options}),{url:e,options:s}}}return t._middlewares=[],t});
/*! (c) @aadityataparia */
//# sourceMappingURL=sifrr.fetch.min.js.map
